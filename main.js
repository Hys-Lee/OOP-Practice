/**   <<문제>>
 *  숫자야구 콘솔,dom 등등 출력 방식과 상관 없이 동작하도록 만들어보기(최소 설계).
 *  내부 외부 분리하능걸 집중해서.
 */
// /** [기능]
//  * - 숫자를 외부로부터 받기 3개씩.
//  * - 내정된 숫자와 순서와 값 모두 일치하는지 확인
//  * - 맞추면 성공 알림 후 종료, 못 맞추면 맞출 때까지 반복
//  *
//  * -(세부기능)- 숫자 이외의 값이 들어오면 경고문 나오고 종료
//  */
/** 유스케이스 (시나리오들. 도메인 지식 기반.): 입력 칸 수가 3도 있고 4도 있는 듯 해서 N으로 일단 설정. '스트라이크'개수에 따라 성공 여부가 갈림을 반영
 *
 *  숫자를 N개 입력
 *      -> N개에 대해 존재 숫자와 순서를 확인
 *          ㄴ> N개에 대해 순서와 값이 모두 맞다면 '스트라이크'개수 ++
 *              순서는 틀린데 값만 맞다면 '볼'개수 ++
 *          -> '스트라이크' 개수가 N이면 성공 알리고 종료
 *          -> '스트라이크' 개수가 N이 아니면 결과 알리기
 *              ㄴ> '볼'과 '스트라이크' 개수 알리기
 *                  -> 다시 입력 받기
 *
 *  숫자가 아닌게 들어 있음
 *      -> invalid한 입력 알리고 종료
 */
/** 협력 (최대한 많은 객체가 협력하도록 나눈다면..)
 * - 입력 받은 숫자들을 (순서 그대로, 개수도 알 수 있게)알려준다.
 * - 입력에 문제가 있는지 없는지 알려준다.
 * - 스트라이크 개수를 확인 해 알려준다
 * - 볼 개수를 확인 해 알려준다
 * - 스트라이크 개수가 N개(최초 입력 개수)라면 성공이라 알려준다
 * - 스트라이크 개수가 N개가 아니라면 스트 개수 및 볼 개수를 알려준다.
 * -
 */
/** 도메인 모델과 책임    (경호원, 심판이 주도적이지 않은 것 같은데. 쩌리들이.)
 * - 사용자: 숫자들을 입력해주는 책임
 * - 경호원: 사용자의 입력이 valid한지 확인하는 책임
 * -- 개수 경호원: 출제자로부터 N을 듣고 사용자 입력 개수가 N인지 확인하는 경호원
 * -- 값 경호원: 사용자가 숫자를 입력했는지 확인하는 경호원
 * -- 책임 경호원: 출제자로부터 조건 듣고 다른 경호원들에게 일을 분배 후 정리
 * ~~~~~~~~~~~~~~~~~~~- 판매자: 경호원으로부터 숫자를 인계받아 각 영역의 심판들에게 알려주는 책임~~~~~~~~~~~~~~~~``
 * - 출제자: 게임마다 숫자들을 내정하는 책임
 * - 심판: 판매자로부터 인계받은 숫자들과 출제자로부터 받은 숫자들을 비교 후 판정 책임
 * -- 스트라이크 심판: 스트라이크 개수만 체크하는 심판
 * -- 볼 심판: 볼 개수만 체크하는 심판
 * -- 결과 판정 심판: 다른 심판들로부터 결과를 수집해 성공 여부를 판단하는 심판
 * - 안내자: 심판으로부터 판정 결과를 듣고 사용자에게 알리는 책임
 */
/** 객체들이 외부에 재공할 행동(메시지들)
 * - 사용자->출제자: 숫자 N개를 사용할 것이라 알림
 * - 출제자->책임 경호원( -> 개수 경호원): 숫자 N개를 받아야 한다고 알림
 * - 사용자->책임 경호원(->개수, 값): 입력 값들을 넘겨줌
 * - 책임 경호원->개수 경호원: 입력 값들의 개수 넘겨줌
 * - 개수 경호원->책임 경호원: 개수가 N이 아님을 알림
 * - 개수 경호원->책임 경호원: 개수가 N은 맞다고 알림
 * - 책임 경호원->값 경호원: 입력 값들을 보내줌
 * - 값 경호원->책임 경호원: 숫자가 아닌게 섞여있다 알림
 * - 값 경호원->책임 경호원: 전부 숫자가 맞다고 알림
 * - 책임 경호원->안내자: invalid한 입력과 그 이유를 알림
 * - 책임 경호원->결과 판정 심판: valid한 입력 값들을 넘겨줌
 * - 결과 판정 심판->스트라이크 심판: 입력 값들을 넘겨줌
 * - 결과 판정 심판->볼 심판: 입력 값들을 넘겨줌
 * - 스트라이크 심판->결과 판정 심판: 스트라이크 개수를 알려줌
 * - 볼 심판->결과 판정 심판: 볼 개수를 알려줌
 * - 결과 판정 심판->안내자: 성공 여부와 스트라이크 및 볼 개수를 알려줌
 */
/** 객체들이 가져야 할 상태들.  (사용자와 )
 * - 출제자: 랜덤한 N개 숫자 값
 * - 사용자: N값, 지급할 입력값들 -- 일단 제외.
 * - 안내자: 성공 멘트. 실패 멘트 템플릿(결과 보여주는)
 * - 책임 경호원: validity
 * - 결과 판정 심판: 성공 여부
 * - 스트라이크 심판: 스트라이크 개수
 * - 볼 심판: 볼 개수
 */
// interface UserInterface<T> {
//   n: Number;
//   inputs: T;
// }
// const User: UserInterface<Array<Number>> = {
//   n: 0,
//   inputs: [],
// };
// interface QuestionerInterface{
// }
var test = {
    data: 0,
    myMethod: function () {
        this.data += 1;
        console.log('this: ', this);
    },
};
console.log(test);
test.myMethod();
console.log(test);
// class User {
//   constructor(n, inputs) {
//     this.n = n;
//     this.inputs = inputs;
//   }
// }
// class Questioner {
//   constructor(n) {
//     this.n = n;
//   }
//   getAnswer = function () {
//     // 랜덤하게 n개의 숫자를 반환.
//   };
// }
